#!/usr/bin/env python
# -*- coding: utf-8 -*-
# vim:fileencoding=utf-8

import csv
import time
import telebot
from telebot import types
from ParsingVkApiRelis import *


# –¥–ª—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ –Ω—É–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç—Ä–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã:
# parseBotRes.py
# SendResults.py
# telegram_bot.py

class User:
    def __init__(self, user_id, user_name, status, user_condition, keywords):
        self.id = user_id
        self.name = user_name
        # default/prime/
        self.status = status
        # chatting/enteringKeywords/addingKeywords/enteringId
        self.condition = user_condition
        self.keywords = keywords


def readFile():
    with open("tgusersStatus.csv") as file:
        csvReader = csv.reader(file)
        for row in csvReader:
            tgUsers[int(row[0])] = {"status": row[1], "condition": row[2], "keywords": row[3].split(";")}


def writeFile():
    with open("tgusersStatus.csv", "w", newline='') as file:
        csvWriter = csv.writer(file)
        for userInfo in tgUsers.items():
            csvWriter.writerow([str(userInfo[0]), str(userInfo[1]["status"]), str(userInfo[1]["condition"]), ";".join(userInfo[1]["keywords"])])


def addArequestToTheQueue(finderId, user_id, user_status, keywords, link):
    with open("queue.csv", "a", newline='') as file:
        csvWriter = csv.writer(file)
        csvWriter.writerow([finderId, user_id, user_status, ";".join(keywords), link])


with open("settings.txt") as file:
    data = file.readlines()

token = data[2].strip()
bot = telebot.TeleBot(token)
tgUsers = dict()
depth_depends_on_the_status = {"default": 2, "prime": 3, "superPrime": 4}

readFile()
writeFile()

with open("queue.csv", "w", newline='') as file:
    pass


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–æ, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–∏—Å—Ç–µ–º–µ
def isRegistered(user_id):
    # –û–±—Ä–∞—â–µ–Ω–∏–µ –∫ –¥–±
    # –ü–æ–∫–∞ —á—Ç–æ —Å—Ç–æ–∏—Ç –∑–∞–≥–ª—É—à–∫–∞

    # –ï—Å–ª–∏ –ø–æ–ª—å—â–∑–æ–≤–∞—Ç–µ–ª—å –µ—Å—Ç—å –≤ —Å–∏—Å—Ç–µ–º–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ç–µ–∂ (True, "—Å—Ç–∞—Ç—É—Å")
    # –ò–Ω–∞—á–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ç–µ–∂ (False, None)
    return True, "default"


def registration(user_id):
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –¥–±
    # –ü–æ–∫–∞ —á—Ç–æ —Å—Ç–æ–∏—Ç –∑–∞–≥–ª—É—à–∫–∞
    return True, "default"


def registrationOrAuthorisation(user_id):
    userInfo = isRegistered(user_id)
    is_user_registered = userInfo[0]
    user_status = userInfo[1]
    if is_user_registered:
        pass
    else:
        userInfo = registration(user_id)
        is_user_registered = userInfo[0]
        user_status = userInfo[1]
    return user_status


def enter_captcha(users, text):
    for user_id in users:
        bot.send_message(user_id, text)
    return


@bot.message_handler(content_types=["text"])
def send_welcome(message):
    text = message.text
    user_name = message.from_user.username
    user_id = message.from_user.id
    user_status = registrationOrAuthorisation(user_id)
    if user_id not in tgUsers:
        tgUsers[user_id] = {"status": "default", "condition": "chatting", "keywords": ""}
    user_status = tgUsers[user_id]["status"]
    user_condition = tgUsers[user_id]["condition"]
    user_keywords = tgUsers[user_id]["keywords"]
    #                user_id, user_name, status, user_condition, keywords):
    userClass = User(user_id, user_name, user_status, user_condition, user_keywords)

    # print(f'{time.ctime()} | @{user_name}({user_id}): "{text}"')
    # print(message, "\n")
    start = "\033[1m"
    end = "\033[0;0m"
    imgg = 'https://i.ibb.co/8xRzcrF/Screenshot-2022-03-13-at-19-29-26.png'
    splited_text = text.split(" ", 1)
    if splited_text[0] == "/start" and len(splited_text) == 1:
        result = f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Socarphe[.]({imgg}) \n\n" \
                 "‚Ä¢ –•–æ—á–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã? –í—ã–±–µ—Ä–∏ *\"–ö–æ–º–∞–Ω–¥—ã\"*\n\n" \
                 "‚Ä¢ –•–æ—á–µ—à—å –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ —á–µ–ª–æ–≤–µ–∫–∞? –í—ã–±–µ—Ä–∏ *\"–ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫\"*\n\n" \
                 f"‚Ä¢ –•–æ—á–µ—à—å –ø–æ–º–µ–Ω—è—Ç—å —Å–≤–æ–π —Å—Ç–∞—Ç—É—Å? –í—ã–±–µ—Ä–∏ *\"–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å\"*\n"
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        buttons = ["–ö–æ–º–∞–Ω–¥—ã", "–ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫", "–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å"]
        keyboard.add(*buttons)
        bot.send_message(message.from_user.id, result, parse_mode='Markdown', reply_markup=keyboard)
    elif (splited_text[0] == "–ö–æ–º–∞–Ω–¥—ã" or splited_text[0] == "/info") and len(splited_text) == 1:
        result = "‚Ä¢ –•–æ—á–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã? –í—ã–±–µ—Ä–∏ *\"–ö–æ–º–∞–Ω–¥—ã\"*\n\n" \
                 "‚Ä¢ –•–æ—á–µ—à—å –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ —á–µ–ª–æ–≤–µ–∫–∞? –í—ã–±–µ—Ä–∏ *\"–ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫\"*\n\n" \
                 f"‚Ä¢ –•–æ—á–µ—à—å –ø–æ–º–µ–Ω—è—Ç—å —Å–≤–æ–π —Å—Ç–∞—Ç—É—Å? –í—ã–±–µ—Ä–∏ *\"–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å\"*\n"
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        buttons = ["–ö–æ–º–∞–Ω–¥—ã", "–ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫", "–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å"]
        keyboard.add(*buttons)
        bot.send_message(message.from_user.id, result, parse_mode='Markdown', reply_markup=keyboard)
    elif splited_text[0] == "–ù–∞—á–∞—Ç—å" and splited_text[1] == "–ø–æ–∏—Å–∫" and len(splited_text) == 2 or (splited_text[0] == "/find" and len(splited_text) == 1):
        userClass.condition = "enteringKeywords"
        result = "–í–≤–µ–¥–∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, –ø–æ –∫–æ—Ç–æ—Ä—ã–º —Ö–æ—á–µ—à—å –æ—Å—É—â–µ—Å—Ç–≤–∏—Ç—å –ø–æ–∏—Å–∫"
        bot.send_message(message.from_user.id, result, parse_mode='Markdown', reply_markup=types.ReplyKeyboardRemove())
    elif (splited_text[0] == "–ò–∑–º–µ–Ω–∏—Ç—å" and splited_text[1] == "—Å—Ç–∞—Ç—É—Å" and len(splited_text) == 2) or (splited_text[0] == "/changeStatus" and len(splited_text) == 1):
        if userClass.status == "default":
            userClass.status = "prime"
            now_status = "–ü—Ä–µ–º–∏—É–º"
        else:
            userClass.status = "default"
            now_status = "–û–±—ã—á–Ω—ã–π"
        result = '–¢—ã –ø–æ–º–µ–Ω—è–ª —Å–≤–æ–π —Å—Ç–∞—Ç—É—Å –Ω–∞ *"{}"*'.format(now_status)
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        buttons = ["–ö–æ–º–∞–Ω–¥—ã", "–ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫"]
        keyboard.add(*buttons)
        bot.send_message(message.from_user.id, result, parse_mode='Markdown', reply_markup=keyboard)
    elif splited_text[0].lower() in ["–∫–∞–ø—Ç—á–∞", "–∫–∞–ø—á–∞"]:
        try:
            captcha = splited_text[1]
            with open("captcha.txt", "w") as file:
                file.write(captcha)
        except IndexError:
            captcha = None
    else:
        result = "–ò–∑–≤–∏–Ω–∏, —è –≤—Ä—è–¥ –ª–∏ –º–æ–≥—É –∫–∞–∫-—Ç–æ –æ—Ç–≤–µ—Ç–∏—Ç—å —Ç–µ–±–µüôÅ"
        if userClass.condition == "enteringKeywords":
            userClass.keywords = text.lower().split(",")
            wordFH = wordFindHelper()
            wordFH.needToAddWords(userClass.keywords)
            if len(wordFH.added_words) > 0:
                result = '–ù–∞–π–¥–µ–Ω—ã —Å—Ö–æ–∂–∏–µ —Å–ª–æ–≤–∞, –≤–≤–µ–¥–∏ –∏—Ö, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å —Ä–∞—Å—à–∏—Ä–∏—Ç—å –ø–æ–∏—Å–∫, –∏–Ω–∞—á–µ –æ—Ç–ø—Ä–∞–≤—å "–ù–µ—Ç"\n–°—Ö–æ–∂–∏–µ —Å–ª–æ–≤–∞: {}'.format(', '.join(wordFH.added_words))
                userClass.condition = "addingKeywords"
            else:
                result = "–û—Å—Ç–∞–ª–æ—Å—å —Ç–æ–ª—å–∫–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –í–ö, –æ—Ç–∫—É–¥–∞ –Ω–∞—á–Ω–µ—à—å –ø–æ–∏—Å–∫."
                userClass.condition = "enteringId"
            bot.send_message(message.from_user.id, result, parse_mode='Markdown', reply_markup=types.ReplyKeyboardRemove())
        elif userClass.condition == "addingKeywords":
            if text.lower() != "–Ω–µ—Ç":
                for word in text.lower().split(";"):
                    userClass.keywords.append(word)
                userClass.keywords = list(set(userClass.keywords))

            result = "–û—Å—Ç–∞–ª–æ—Å—å —Ç–æ–ª—å–∫–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –í–ö, –æ—Ç–∫—É–¥–∞ –Ω–∞—á–Ω–µ—à—å –ø–æ–∏—Å–∫."
            userClass.condition = "enteringId"
            bot.send_message(message.from_user.id, result, parse_mode='Markdown', reply_markup=types.ReplyKeyboardRemove())
        elif userClass.condition == "enteringId":
            result = "–¢—ã –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å. –ó–∞–≥–ª—è–Ω–∏ —Å—é–¥–∞ –ø–æ–∑–∂–µ"
            t = time.time()
            addArequestToTheQueue(str(int(t)) + str(t - int(t))[2:], userClass.id, userClass.status, userClass.keywords,
                                  text)
            userClass.condition = "chatting"

            keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
            buttons = ["–ö–æ–º–∞–Ω–¥—ã", "–ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫", "–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å"]
            keyboard.add(*buttons)
            bot.send_message(message.from_user.id, result, parse_mode='Markdown', reply_markup=keyboard)
        else:
            bot.send_message(message.from_user.id, result, parse_mode='Markdown')

    tgUsers[userClass.id] = {"status": userClass.status, "condition": userClass.condition, "keywords": userClass.keywords}
    writeFile()


if __name__ == "__main__":
    bot.polling()
